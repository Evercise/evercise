function redirectTo(data){
    window.location.href = data.url;
}

function editClass(data){
    $('#'+ data.id).html(data.view);
    $('#edit-'+ data.id).removeClass('disabled');
    $('#submit-'+ data.id).hide();
    $('#'+ data.id).parent().collapse('show');
    $('#infoToggle-'+data.id).removeClass('hide');
    datepick();
}

function updateHubRow(data){
    $('#hub-edit-row-'+data.id).after(data.view);
}

function newSessionAdded(data){
    $('#'+ data.id).html(data.view);
    addSession();
    datepick();
}

function removeSessionRow(data){
    $('#hub-static-row-'+data.id).remove();
}
if(typeof angular != 'undefined') {
    var app = angular.module('DiscoverApp', [
        'google-maps'.ns(),
        'infinite-scroll',
        'ngSanitize'
    ]);

    app.config(['GoogleMapApiProvider'.ns(), function (GoogleMapApi) {
        GoogleMapApi.configure({
            v: '3.16',
            libraries: 'weather,geometry,visualization'
        });
    }]);

    app.filter('truncate', function () {
        return function (text, length, end) {
            if (isNaN(length))
                length = 10;

            if (end === undefined)
                end = "...";

            if (text.length <= length || text.length - end.length <= length) {
                return text;
            }
            else {
                return String(text).substring(0, length-end.length) + end;
            }

        };
    });

    app.filter('repeat', function() {
        return function(val, range) {
            range = parseInt(range);
            for (var i=0; i<range; i++)
                val.push(i);
            return val;
        };
    });

}

$.fn.exists = function(callback) {
    var args = [].slice.call(arguments, 1);

    if (this.length) {
        callback.call(this, args);
    }

    return this;
};

function datepick(){
    $('.date-picker').datepicker({
        format: "yyyy-mm-dd",
        startDate: "+1d",
        autoclose: true,
        todayHighlight: true
    });
}

$.ajaxSetup({
    headers: {
        'X-CSRF-Token': TOKEN
    }
});

$(function(){

    // initialise nav bar is nav bar exists
    $('.navbar').exists(function() {
        new Navigation( this , $('.hero-nav-change'), $('.sticky-fixed-nav') );
    });

    // initialise masonry if masonry container exists
    $('.masonry').exists(function() {
       new Masonry( this );
    })

    // initialise user profile if user profile exists
    $('#user-nav-bar').exists(function() {
        new Profile(this);
    });

    // used to change a button on click
    $('.toggle-switch').exists(function() {
        $(document).on('click', '.toggle-switch', function(e){
            new ToggleSwitch($(e.target));
        })
    });

    $('.map_canvas').exists(function() {
        map = new Map(this);
    });


    $('.mb-scroll').exists(function(){
        $(this).mCustomScrollbar({
            scrollSpeed: 10,
            autoHideScrollbar: true
        });
    })

    $('.holder').exists(function(){
        new ImagePlaceholder();
    })

    $('#register-form, #create-class').exists(function(){
        new Validation(this);
    })

    $('.class-preview').exists(function(){
         new PreviewClassBox(this);
    })

    $('.hide-by-class').exists(function(){
        var i = 0;
        $('.hide-by-class').each(function(){
            var self = this;

            $('.'+$(this).attr('href').substr(1)).exists(function(){
                if(i == 0){
                    $(self).addClass('active');
                    $(this).removeClass('hide');
                }
                $(self).removeClass('disabled');
                i++;
            })

        })
        this.click(function(){
            $('.hide-by-class').removeClass('active');
            $(this).addClass('active');
            $('.hide-by-class-element').addClass('hide');
            $('.'+ $(this).attr('href').substr(1)).removeClass('hide');
        })
    })

    $('#login-form').exists(function(){
        login = this;
        $(document).on('submit', login, function(e){
            e.preventDefault();
            new AjaxRequest(login, redirectTo);
        })
    })
    $('.edit-class-inline').exists(function(){
        $(document).on('submit', '.edit-class-inline', function(e){
            e.preventDefault();
            $(e.target).find('.btn-toggle-down').addClass('loading');
            new AjaxRequest($(e.target), editClass);
        })
        $(document).on('submit', '.add-session', function(e){
            e.preventDefault();
            new AjaxRequest($(e.target), newSessionAdded);
        })
        $(document).on('submit', '.update-session', function(e){
            e.preventDefault();
            new AjaxRequest($(e.target), updateHubRow);
        })
        $(document).on('submit', '.remove-session', function(e){
            e.preventDefault();
            new AjaxRequest($(e.target), removeSessionRow);
        })
        $(document).on('submit', '.remove-session', function(e){
            e.preventDefault();
            new AjaxRequest($(e.target), removeSessionRow);
        })
    })


    $('.dropdown-cart').exists(function(){
        cart = new Cart(this);
    })
    $('.select2').exists(function(){
        $(this).select2({
            maximumSelectionSize: 3,
            minimumResultsForSearch: 1,
            placeholder: 'Choose upto 3 categories',
            closeOnSelect: true,
            openOnEnter: false,
            formatNoMatches: function() {
                return '';
            },
            dropdownCssClass: 'select2-hidden'
        });
    })


    $('#image-cropper').exists(function(){
        new imageCropper(this);
    })
    $('#create-venue').exists(function(){
        new createVenue(this);
    })

    $('#calendar').exists(function(){
        new Calendar(this);
    })


});
var Validation = function(form){
    this.form = form;
    this.validIcon = 'glyphicon glyphicon-ok';
    this.invalidIcon = 'glyphicon glyphicon-remove';
    this.validatingIcon = 'glyphicon glyphicon-refresh';
    this.displayName = {
        message: 'Your username is not valid',
        validators: {
            notEmpty: {
                message: 'Your display name is required'
            },
            stringLength: {
                min: 5,
                max: 20,
                message: 'Your display name must be more than 5 and less than 20 characters long'
            },
            regexp: {
                regexp: /^[a-zA-Z0-9_]+$/,
                message: 'Your display name can only consist of alphabetical, number and underscore'
            }
        }
    };
    this.email = {
        validators: {
            notEmpty: {
                message: 'Your email is required and cannot be empty'
            },
            emailAddress: {
                message: 'Your email is not a valid email address'
            }
        }
    };
    this.first_name = {
        validators: {
            notEmpty: {
                message: 'Your first name is required and cannot be empty'
            },
            stringLength: {
                min: 2,
                max: 15,
                message: 'Your first name must be more than 2 and less than 15 characters long'
            }
        }
    };
    this.last_name = {
        validators: {
            notEmpty: {
                message: 'Your surname is required and cannot be empty'
            },
            stringLength: {
                min: 2,
                max: 15,
                message: 'Your surname must be more than 2 and less than 15 characters long'
            }
        }
    };
    this.password = {
        validators: {
            notEmpty: {
                message: 'Your password is required and cannot be empty'
            },
            stringLength: {
                min: 6,
                max: 32,
                message: 'Your Password must be more than 6 and less than 32 characters long'
            },
            identical: {
                field: 'confirmed_password',
                message: 'Your passwords do not match'
            }
        }
    };
    this.confirmed_password = {
        validators: {
            notEmpty: {
                message: 'Your password is required and cannot be empty'
            },
            stringLength: {
                min: 6,
                max: 32,
                message: 'Your Password must be more than 6 and less than 32 characters long'
            },
            identical: {
                field: 'password',
                message: 'Your passwords do not match'
            }
        }
    };
    this.class_name = {
        validators: {
            notEmpty: {
                message: 'Your class name is required'
            },
            stringLength: {
                min: 3,
                max: 50,
                message: 'Your class name must be more than 3 and less than 50 characters long'
            }
        }
    };
    this.class_description = {
        validators: {
            notEmpty: {
                message: 'Your class needs a description'
            },
            stringLength: {
                min: 50,
                max: 500,
                message: 'Your class description must be more than 50 and less than 500 characters long'
            }
        }
    };

    this.init();
}
Validation.prototype = {
    constructor: Validation,
    init: function(){
        this.form.find("input[type='submit']").prop('disabled', true);
        this.validation();
    },
    validation: function(){
        this.form.bootstrapValidator({
            message: 'This value is not valid',
            feedbackIcons: {
                valid: this.validIcon,
                invalid: this.invalidIcon,
                validating: this.validatingIcon
            },

            fields: {
                display_name: this.displayName,
                email: this.email,
                first_name: this.first_name,
                last_name: this.last_name,
                password: this.password,
                confirmed_password: this.confirmed_password,
                class_name: this.class_name,
                class_description: this.class_description
            }
        })
        .on('success.form.bv', function(e) {
            e.preventDefault();
            new AjaxRequest($(e.target), redirectTo);
        });
    }
}
if(typeof angular != 'undefined') {
    app.controller('DiscoverController', ["$scope", "$q", function ($scope, $q) {

        $scope.everciseGroups = laracasts.mapResults;

        $scope.view = 'mapview';

        $scope.sort = 'id';

        $scope.changeView = function (view) {
            $scope.view = view;
        };


        $scope.isPreviewOpen = false;

        $scope.map = {
            center: {
                latitude: 50,
                longitude: -1
            },
            pann: {},
            options: {
                streetViewControl: false,
                maxZoom: 20,
                minZoom: 3
            },
            zoom: 12
        };

        $scope.results = $scope.everciseGroups.length;

        $scope.myMarkers = [];


        $scope.clusterStyles = [
            {
                textColor: 'white',
                url: '/assets/img/icon_default_small_pin_number.png',
                height: 43,
                width: 33,
                anchorText: [-14,9]
            },
            {
                textColor: 'white',
                url: '/assets/img/icon_default_large_pin_number.png',
                height: 66,
                width: 51,
                anchorText: [-22,14]
            }
        ];

        $scope.clusterOptions = {
            gridSize: 8,
            maxZoom: 20,
            zoom: 15,
            styles: $scope.clusterStyles
        }

        $scope.mask = false;

        if ($scope.everciseGroups.length < 200) {
            $scope.initialLoad = $scope.everciseGroups.length;
        }
        else {
            $scope.initialLoad = 200;
        }

        $scope.markers = [];


        var createMarker = function (data) {
            var result = {
                id: data.id,
                name: data.name,
                image: '/profiles/' + data.user.directory + '/' + data.image,
                latitude: data.venue.lat,
                longitude: data.venue.lng,
                icon: '/assets/img/icon_default_small_pin.png',
                price: data.default_price,
                rating: data.ratings.length,
                description: data.description,
                stars: $scope.getStars(data.ratings),
                capacity: data.capacity,
                sessions: data.futuresessions,
                nextClassDate: new Date(data.futuresessions[0].date_time),
                nextClassDuration: data.futuresessions[0].duration,
                link: '/class/' + data.id,
                click: function () {
                    $scope.clicked(this.model);
                }
            }
            return result;
        }


        $scope.clusterEvents = {
            click: function (cluster, clusterModels) {
                angular.forEach(clusterModels, function (value, key) {
                    $scope.clicked(value);
                });
            }
        };

        $scope.returnPreview = function () {
            $scope.isPreviewOpen = false;
        }

        $scope.lastActiveMarker = '';


        $scope.clicked = function (marker) {


            $scope.isPreviewOpen = true;
            // change preview
            $scope.preview.id = 'preview-' + marker.id;
            $scope.preview.image = "url('" + marker.image + "')";
            $scope.preview.description = marker.description;
            $scope.preview.nextClassDate = new Date(marker.sessions[0].date_time);
            $scope.preview.nextClassDuration = marker.sessions[0].duration;
            $scope.preview.capacity = marker.capacity;
            $scope.preview.link = marker.link;

            // topggle markers
            $scope.lastActiveMarker.icon = '/assets/img/icon_default_small_pin.png';
            $scope.lastActiveMarker = marker;
            marker.icon = '/assets/img/icon_default_large_pin.png';

            //pan map
            $scope.map.pan = {
                latitude: marker.latitude,
                longitude: marker.longitude
            };
            $scope.map.center = {
                latitude: marker.latitude,
                longitude: marker.longitude
            };
            $scope.map.zoom = 15;

            $scope.mask = true;
            // find in side bar ands scroll
            scrollToSnippet('#' + marker.id);
        }

        function scrollToSnippet(id) {
            $('.class-snippet').addClass('fade-out');
            $('.class-snippet').removeClass('active');
            $(id).addClass('active');
            $('.mb-scroll').mCustomScrollbar("scrollTo", id, {
                scrollInertia: 500,
                timeout: 10
            });
        }

        $scope.getStars = function (ratings) {
            var total = 0;
            if (ratings.length > 0) {
                for (var i = 0; i < ratings.length; i++) {
                    total = total + ratings[i].stars;
                }
                //result = (Math.round( (total / ratings.length) *2) / 2).toFixed(1);
                result = Math.round(total / ratings.length);
            }
            else {
                result = 0
            }
            return result;
        }

        $scope.preview = {
            id: 1,
            image: '',
            description: '',
            nextClassDate: '',
            nextClassDuration: '',
            capacity: '',
            link: ''
        }
        // watch the scope for map loaded

        $scope.$watch(function () {
            return $scope.map.bounds;
        }, function () {
            for (var i = 0; i < $scope.initialLoad; i++) {
                $scope.myMarkers.push(createMarker($scope.everciseGroups[i]));
            }
            $scope.markers = $scope.myMarkers;

        }, true);

        // load more on scroll
        /*
         $scope.loadMore = function(){
         var last = $scope.markers.length -1;
         if($scope.everciseGroups.length < last + 16)
         {
         var extraLoad = $scope.everciseGroups.length - last;
         }
         else
         {
         var extraLoad = 16;
         }
         for (var i = 1; i < extraLoad; i++) {
         $scope.myMarkers.push(createMarker($scope.everciseGroups[ last + i ]))
         }
         };
         */
    }]);
}

var Navigation = function (nav, hero, stickyHeader) {

    this.nav = nav;
    this.hero = hero;
    this.sticky = stickyHeader;
    this.stickyTop = 0;
    this.height = nav.height();
    this.heroClass = 'nav-hero';
    this.scroll = 0;

    this.init();
    this.checkScrollPosition();

}

Navigation.prototype = {
    constructor: Navigation,

    init: function () {
        if (this.hero.length > 0) {
            this.addHeroClass();
        }
        if (this.sticky.length > 0) {
            this.stickyTop = this.sticky.offset().top;
            this.stick();
        }

    },
    addHeroClass: function () {
        this.nav.addClass(this.heroClass);
    },
    removeHeroClass: function () {
        this.nav.removeClass(this.heroClass);
    },
    addStickyClass: function(){
        this.sticky.addClass('navbar-fixed-top');
        this.sticky.css({'top':this.height })
        $('.sticky-wrapper').css({'margin-top': this.sticky.outerHeight(true) })
    },
    removeStickyClass: function(){
        this.sticky.removeClass('navbar-fixed-top');
        this.sticky.css({'top':0 })
        $('.sticky-wrapper').css({'margin-top':0 })
    },
    checkScrollPosition: function () {
        // refrence this for use outside of this scope
        var self = this;
        $(window).scroll(function (event) {
            self.scroll = $(window).scrollTop();
            self.stick();
            if (self.scroll + self.height >= self.hero.outerHeight()) {
                self.removeHeroClass()
            }
            else {
                self.addHeroClass();
            }
        })
    },
    stick: function(){
        var self = this;
        if (self.scroll > self.stickyTop - this.sticky.outerHeight(true)) {

            self.addStickyClass();
        }
        else{
            self.removeStickyClass();
        }
    }

}


function imageCropper(elem){
    this.elem = elem;
    this.modal = this.elem.find(".modal-cropper");
    this.modalImage = this.modal.find("#uploaded-image");
    this.uploadForm = this.elem.find("#image-upload-form");
    this.galleryImage = $('.gallery-option');
    this.croppedForm = this.modal.find("#cropped-image");
    this.uploadButton = this.modal.find("input[name='file']");
    this.imageSelect = this.uploadForm.find("#image-select");
    this.removeButton = this.uploadForm.find("#cover-remove");
    this.image = this.modal.find(".bootstrap-modal-cropper img");
    this.xInput = this.modal.find("input[name='x']");
    this.yInput = this.modal.find("input[name='y']");
    this.wInput = this.modal.find("input[name='width']");
    this.hInput = this.modal.find("input[name='height']");
    this.bwInput = this.modal.find("input[name='box_width']");
    this.bhInput = this.modal.find("input[name='box_height']");
    this.originalData = {};
    this.ratio = 2.35;
    this.x = 0;
    this.y = 0;
    this.w = 0;
    this.h = 0;
    this.bw = 0;
    this.bh = 0;
    this.init();
}
imageCropper.prototype = {
    constructor: imageCropper,
    init: function(){
        this.addListener();

    },
    addListener: function () {
        this.imageSelect.on("click", $.proxy(this.upload, this) );
        this.uploadButton.on("change", $.proxy(this.getImage, this))
        this.modalImage.on("load", $.proxy(this.openModal, this))
        this.modal.on("shown.bs.modal", $.proxy(this.crop, this));
        this.modal.on("hidden.bs.modal", $.proxy(this.destroyCrop, this));
        this.croppedForm.on("submit", $.proxy(this.submitForm, this));
        this.galleryImage.on("click", $.proxy(this.clickGalleryOption, this));
        this.removeButton.on("click", $.proxy(this.removeCover, this));
    },
    upload: function(){
        this.uploadButton.trigger('click');
    },
    getImage: function(e){
        self = this;
        if (e.target.files && e.target.files[0]) {

            var reader = new FileReader();
            reader.onload = function (e) {
                self.modalImage.attr('src', e.target.result);
            }

            reader.readAsDataURL(e.target.files[0]);

        }
    },
    openModal: function(){
        this.modal.modal('show');
    },
    closeModal: function(){
        this.modal.modal('hide');
    },
    crop: function(){
        self = this;
        this.image = this.modal.find(".bootstrap-modal-cropper img");
        this.image.cropper({
            data: this.originalData,
            aspectRatio: this.ratio,
            done: function(data) {
                self.x = data.x;
                self.y = data.y;
                self.w = data.width;
                self.h = data.height;
            }
        });
    },
    destroyCrop: function(){
        this.image.cropper("destroy");
        self.modalImage.attr('src',null);
        this.uploadButton.val('');
    },
    submitForm: function(e){
        e.preventDefault();

        this.bw = this.image.cropper("getImageData").width;
        this.bh = this.image.cropper("getImageData").height;
        this.xInput.val(this.x);
        this.yInput.val(this.y);
        this.wInput.val(this.w);
        this.hInput.val(this.h);
        this.bwInput.val(this.bw);
        this.bhInput.val(this.bh);
        this.ajaxUpload();

    },
    ajaxUpload: function () {
        var url = this.croppedForm.attr("action"),
            data = new FormData(this.croppedForm[0]),
            self = this;

        $.ajax(url, {
            type: "post",
            data: data,
            processData: false,
            contentType: false,

            beforeSend: function () {
                self.croppedForm.find("input[type='submit']").prop('disabled', true).after('<span id="cropping-loading" class="icon icon-loading ml10"></span>');
                self.image.cropper("disable");
            },

            success: function (data) {
                self.croppedForm.find("input[type=submit]").prop('disabled', false);
                self.uploadForm.append('<img src="/'+data.file +'" alt="cover photo" class="img-responsive">')
            },

            error: function (XMLHttpRequest, textStatus, errorThrown) {
                console.log(XMLHttpRequest + ' - ' + textStatus + ' - ' + errorThrown);
            },

            complete: function () {
                $('#cropping-loading').remove();
                self.displayRemove();
                self.closeModal();
            }
        });
    },
    clickGalleryOption: function(e){
        this.uploadForm.append( $(e.target).clone().removeClass('gallery-option') );
    },
    removeCover: function(){
        this.hideRemove();
        this.uploadForm.find("img").remove();
    },
    displayRemove: function(){
        this.removeButton.removeClass('hidden');
    },
    hideRemove: function(){
        this.removeButton.addClass('hidden');
    }


}
function createVenue(form){
    this.form = form;
    this.next = this.form.find('.next');
    this.validIcon = 'glyphicon glyphicon-ok';
    this.invalidIcon = 'glyphicon glyphicon-remove';
    this.validatingIcon = 'glyphicon glyphicon-refresh';
    this.venueName = {
        message: 'Your Venue is not valid',
        validators: {
            notEmpty: {
                message: 'Your Venue requires a name'
            },
            stringLength: {
                min: 2,
                max: 50,
                message: 'Your Venue name must be more than 2 and less than 50 characters long'
            }
        }
    };
    this.venueStreet = {
        message: 'Your street is not valid',
        validators: {
            notEmpty: {
                message: 'Your Venue requires a street'
            },
            stringLength: {
                min: 2,
                max: 50,
                message: 'Your street name must be more than 2 and less than 50 characters long'
            }
        }
    };
    this.venuePC = {
        message: 'Your post code is not valid',
        validators: {
            notEmpty: {
                message: 'Your Venue requires a post code'
            },
            stringLength: {
                min: 6,
                max: 8,
                message: 'Your post code must be more than 6 and less than 8 characters long'
            }
        }
    };
    this.init();
}
createVenue.prototype = {
    constuctor: createVenue,
    init: function(){
        this.addListener();
        this.validation();
        this.form.find("input[type='submit']").prop('disabled', true);
    },
    addListener: function(){
        this.next.on("click", $.proxy(this.switchTab, this));
    },
    switchTab: function(e){
        e.preventDefault();

        var target = $(e.target).data('target');
        $('#'+target+'-pill').click();
    },
    validation: function(){
        var self = this;

        $('#create_venue').bootstrapValidator({
            message: 'This value is not valid',
            feedbackIcons: {
                valid: this.validIcon,
                invalid: this.invalidIcon,
                validating: this.validatingIcon
            },

            fields: {
                venue_name: this.venueName,
                venue_street: this.venueStreet,
                venue_post_code: this.venuePC
            }
        })
        .on('success.form.bv', function(e) {
            e.preventDefault();
            self.ajaxUpload();
        });
    },
    ajaxUpload: function () {
        var url = this.form.attr("action"),
            data = new FormData(this.form[0]),
            self = this;
        $.ajax(url, {
            type: "post",
            data: data,
            processData: false,
            contentType: false,

            beforeSend: function () {
                self.form.find("input[type='submit']").prop('disabled', true).after('<span id="cropping-loading" class="icon icon-loading ml10"></span>');
            },

            success: function (data) {
                self.form.find("input[type=submit]").prop('disabled', false);
            },

            error: function (XMLHttpRequest, textStatus, errorThrown) {
                console.log(XMLHttpRequest + ' - ' + textStatus + ' - ' + errorThrown);
            },

            complete: function () {
                console.log('complete');
            }
        });
    }
}
var Profile = function (nav) {
    this.nav = nav;
    this.top = 0;
    this.speed = 400;
    this.init();
}

Profile.prototype = {
    constructor: Profile,
    // tempary switch between views

    init: function () {

        this.top = Math.floor( this.nav.offset().top  - this.nav.outerHeight(true) );

        var self = this;

        $(document).on('click', '.nav-pills li a', function(){

            destination = $(this).attr('href');
            $('.nav-pills li').removeClass('active');
            $(this).parent().addClass('active');
            $('.profile-panels').addClass('hidden');
            $(destination).removeClass('hidden');

            new Masonry( $('.masonry') );
            self.scroll();

        })
    },
    scroll: function(){
      //  $('html, body').animate({scrollTop : this.top }, this.speed);
    }
}
var Masonry = function (masonry) {
    this.masonry = masonry;
    this.init();
}
Masonry.prototype = {
    constructor: Masonry,
    init: function(){
        var $container = this.masonry;

        $container.masonry({
            itemSelector: '.masonry-item',
            isInitLayout: true,
            transitionDuration: 0
        });
        $container.masonry;
    }
}
var ToggleSwitch = function (toggle) {
    this.toggle = toggle;
    this.originalClass = toggle.data('removeclass');
    this.switchClass = toggle.data('switchclass');
    this.originalText = toggle.text();
    this.switchText = toggle.data('switchtext');
    this.init();
}
ToggleSwitch.prototype = {
    constructor: ToggleSwitch,
    init: function(){
        this.toggle.text(this.switchText);
        this.toggle.addClass(this.switchClass);
        this.toggle.removeClass(this.originalClass);
        this.toggle.data('switchtext', this.originalText);
        this.toggle.data('removeclass', this.switchClass);
        this.toggle.data('switchclass', this.originalClass);
    }
}
// Class Map
function Map(map) {
    this.lat = map.data('lat');
    this.lng = map.data('lng');
    this.zoom = map.data('zoom');
    this.icon = '/assets/img/icon_default_small_pin.png';
    this.init();
}

Map.prototype = {
    constructor: Map,
    init: function(){
        var script = document.createElement("script");
        script.src = "http://www.google.com/jsapi?key=AIzaSyAha5JzFciZvU_rWu_2d2UVl7o4Z8LWdcg&callback=map.load";
        script.type = "text/javascript";
        document.getElementsByTagName("head")[0].appendChild(script);
    },
    load: function(){
        self = this;
        google.load("maps", "3", {other_params: "sensor=false", "callback" : function(){
            var map = new google.maps.Map(
                document.getElementById('map_canvas'), {
                center: new google.maps.LatLng(self.lat, self.lng),
                zoom: self.zoom,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });
            google.maps.event.trigger(map, "resize");
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(self.lat, self.lng),
                animation: google.maps.Animation.DROP,
                icon: self.icon
            });
            marker.setMap(map);
        }});
    }
}
var AjaxRequest = function (form, callback){
    this.form = form;
    this.actionUrl = form.attr('action');
    this.method = form.attr('method');
    this.data = form.serialize();
    this.dataType = 'json';
    this.validationScrollSpeed = 200;
    this.validationoffset = 85;
    this.validationscroll = false;
    this.callbackname = callback;
    this.disableButton();
    this.init();
}

AjaxRequest.prototype = {
    constuctor: AjaxRequest,
    init: function(){
        self = this;
        $.ajax({
            url:  self.actionUrl,
            type: self.method,
            data: self.data,
            dataType: self.dataType
        }).done(
            function(data) {
                self.callbackSelctor(data);
            }
        );
    },
    disableButton: function(){
        this.form.find('input[type="submit"]').prop('disabled', true);
    },
    renableButton: function(){
        this.form.find('input[type="submit"]').prop('disabled', false);
    },
    callbackSelctor: function(data){
        if(data.callback == 'error')
        {
            self.failedValidation(data);
        }
        else {
            self.callbackname(data);
        }
    },
    failedValidation: function(data){
        self = this;
        var arr = data.errors;

        if(self.form.attr('id') == 'login-form'){
            self.form.find("input[name = 'password']").after('<div class="mt10 alert alert-danger alert-dismissible" role="alert">'+arr+'<button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button></div>');
        }
        else
        {
            $.each(arr, function(index, value)
            {
                if (self.validationscroll == false) {
                    self.form.find("#" + index).focus();
                    $('html, body').animate({ scrollTop: self.form.find("#" + index).offset().top - self.validationoffset }, self.validationScrollSpeed);
                    self.validationscroll = true;
                }
                self.form.find('#' + index).parent().addClass('has-error');
                self.form.find('#' + index).parent().find('.glyphicon-ok').remove();
                self.form.find('#' + index).after('<small class="help-block" data-bv-validator="notEmpty" data-bv-for="'+index+'" data-bv-result="INVALID">'+value+'</small>');
                self.form.find('#' + index).after('<i class="form-control-feedback glyphicon glyphicon-remove" data-bv-icon-for="'+index+'" style="display: block;"></i>');
            })
        }

        self.renableButton();
    }

}

var ImagePlaceholder = function () {
    this.colour = '#ebedee';
    this.size = 0;
    this.themes();

}

ImagePlaceholder.prototype = {
    constructor: ImagePlaceholder,
    themes: function(){
        self = this;
        Holder.addTheme("upload", {
            background: self.colour, foreground: self.colour, size: self.size
        });
    }

}
var PreviewClassBox = function (box) {
    this.box = box;
    this.boxClass = box.attr('class');
    this.id = box.attr('id');
    //this.init();
}
/*
PreviewClassBox.prototype = {
    constructor: PreviewClassBox,
    init: function(){
        $("[data-target='" + this.id + "']").on('click', function(e) {
            alert('clicked');
        });
       var test = $("[data-target='" + this.id + "']").attr('class');
        console.log(test);
    }
}
    */
function Cart(cart) {
    this.cart = cart;
    this.addTo = $('.add-to-class');
    this.watch();
}
Cart.prototype = {
    constructor: Cart,
    watch: function(){
        var self = this;
        $(document).on('submit', '#empty-cart', function(e){
            self.submit( $('#empty-cart'), e);
        })
        $(document).on('submit', '.remove-row', function(e){
            self.submit( $('.remove-row'), e);
        })
        this.addTo.on('submit', function(e){
            self.submit( $(this), e);
        })
    },
    submit: function(form , e){
        e.preventDefault();
        e.stopPropagation();
        new AjaxRequest(form, cart.updateCart);
    },

    updateCart: function(data){
        $('.dropdown ').addClass('open');
        $('.dropdown-cart').replaceWith(data.view);
    }
}

function Calendar(elem){
    this.container = elem;
    this.daysOfWeek = '';
    this.days = '';
    this.index = '';
    this.recurring = 6;
    this.rows = [];
    this.firstRecurringDay = '';
    this.init();
}
Calendar.prototype = {
    constructor: Calendar,
    init: function () {

        this.container.datepicker({
            format: "yyyy-mm-dd",
            startDate: "+1d",
            todayHighlight: true,
            multidate: true
        });
        this.daysOfWeek = this.container.find('.dow');
        this.days = this.container.find('.day');
        this.addListener();
    },
    addListener: function () {
        this.daysOfWeek.on("click", $.proxy(this.recurringDay, this) );
    },
    recurringDay: function(e){
        this.index = ($(e.target).index());
        for(var r = 0; r < 2; r++){
            this.rows = [];
            this.setRecurringDays();

            this.index = ($(e.target).index());

        }

    },
    setRecurringDays: function(){
        var self = this;
        for(var i = 0; i < 6; i++){
            self.rows.push(self.container.find('tbody .day:eq(' + self.index + ')') );
            self.index = self.index + 7;
        }
        self.clickRecurringDays();

    },
    clickRecurringDays: function(){
        var self = this;
        $.each(this.rows, function(i, val) {
            $(val.selector+':not(.new)').click();
        })
        self.nextMonth();
    },
    nextMonth : function(){
        $('th.next').first().click();
    }
}